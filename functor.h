#ifndef DNET_FUNCTOR
#define DNET_FUNCTOR

// Generated by functor_gen.cpp. Do not modify this file directly!

#include "smartptr.h"

#include <boost/noncopyable.hpp>

// Start of copied block

template<typename T0 = void, typename T1 = void> class Closure : private boost::noncopyable {
public:
  virtual void Run(T0 param0 , T1 param1 ) const = 0;

  virtual ~Closure() { };
};

template<typename Owner , typename T0 = void, typename T1 = void> class Closure_Member_NC : public Closure<T0 , T1 >  {
private:
  Owner *owner;
  void (Owner::*function)(T0 , T1 );

public:
  virtual void Run(T0 param0 , T1 param1 ) const { return (owner->*function)(param0 , param1 ); };
  
  Closure_Member_NC(Owner *owner, void (Owner::*function)(T0 , T1 )) : owner(owner), function(function) { };
};

template<typename Owner , typename T0 = void, typename T1 = void> class Closure_Member_C : public Closure<T0 , T1 >  {
private:
  const Owner *owner;
  void (Owner::*function)(T0 , T1 ) const;

public:
  virtual void Run(T0 param0 , T1 param1 ) const { return (owner->*function)(param0 , param1 ); };
  
  Closure_Member_C(const Owner *owner, void (Owner::*function)(T0 , T1 ) const) : owner(owner), function(function) { };
};

template<typename Owner , typename T0 , typename T1 >  smart_ptr<Closure<T0 , T1 > > NewFunctor(Owner *owner, void (Owner::*function)(T0 , T1 )) {
  return smart_ptr<Closure<T0 , T1 > >(new Closure_Member_NC<Owner , T0 , T1 > (owner, function));
};

template<typename Owner , typename T0 , typename T1 >  smart_ptr<Closure<T0 , T1 > > NewFunctor(const Owner *owner, void (Owner::*function)(T0 , T1 ) const) {
  return smart_ptr<Closure<T0 , T1 > >(new Closure_Member_C<Owner , T0 , T1 > (owner, function));
};

// End of copied block
// Start of copied block

template<typename Returnvalue , typename T0 = void, typename T1 = void> class Callback : private boost::noncopyable {
public:
  virtual Returnvalue Run(T0 param0 , T1 param1 ) const = 0;

  virtual ~Callback() { };
};

template<typename Owner , typename Returnvalue , typename T0 = void, typename T1 = void> class Callback_Member_NC : public Callback<Returnvalue , T0 , T1 >  {
private:
  Owner *owner;
  Returnvalue (Owner::*function)(T0 , T1 );

public:
  virtual Returnvalue Run(T0 param0 , T1 param1 ) const { return (owner->*function)(param0 , param1 ); };
  
  Callback_Member_NC(Owner *owner, Returnvalue (Owner::*function)(T0 , T1 )) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue , typename T0 = void, typename T1 = void> class Callback_Member_C : public Callback<Returnvalue , T0 , T1 >  {
private:
  const Owner *owner;
  Returnvalue (Owner::*function)(T0 , T1 ) const;

public:
  virtual Returnvalue Run(T0 param0 , T1 param1 ) const { return (owner->*function)(param0 , param1 ); };
  
  Callback_Member_C(const Owner *owner, Returnvalue (Owner::*function)(T0 , T1 ) const) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue , typename T0 , typename T1 >  smart_ptr<Callback<Returnvalue , T0 , T1 > > NewFunctor(Owner *owner, Returnvalue (Owner::*function)(T0 , T1 )) {
  return smart_ptr<Callback<Returnvalue , T0 , T1 > >(new Callback_Member_NC<Owner , Returnvalue , T0 , T1 > (owner, function));
};

template<typename Owner , typename Returnvalue , typename T0 , typename T1 >  smart_ptr<Callback<Returnvalue , T0 , T1 > > NewFunctor(const Owner *owner, Returnvalue (Owner::*function)(T0 , T1 ) const) {
  return smart_ptr<Callback<Returnvalue , T0 , T1 > >(new Callback_Member_C<Owner , Returnvalue , T0 , T1 > (owner, function));
};

// End of copied block
// Start of copied block

template<typename T0 > class Closure<T0 , void>  : private boost::noncopyable {
public:
  virtual void Run(T0 param0 ) const = 0;

  virtual ~Closure() { };
};

template<typename Owner , typename T0 > class Closure_Member_NC<Owner , T0 , void>  : public Closure<T0 >  {
private:
  Owner *owner;
  void (Owner::*function)(T0 );

public:
  virtual void Run(T0 param0 ) const { return (owner->*function)(param0 ); };
  
  Closure_Member_NC(Owner *owner, void (Owner::*function)(T0 )) : owner(owner), function(function) { };
};

template<typename Owner , typename T0 > class Closure_Member_C<Owner , T0 , void>  : public Closure<T0 >  {
private:
  const Owner *owner;
  void (Owner::*function)(T0 ) const;

public:
  virtual void Run(T0 param0 ) const { return (owner->*function)(param0 ); };
  
  Closure_Member_C(const Owner *owner, void (Owner::*function)(T0 ) const) : owner(owner), function(function) { };
};

template<typename Owner , typename T0 >  smart_ptr<Closure<T0 > > NewFunctor(Owner *owner, void (Owner::*function)(T0 )) {
  return smart_ptr<Closure<T0 > >(new Closure_Member_NC<Owner , T0 > (owner, function));
};

template<typename Owner , typename T0 >  smart_ptr<Closure<T0 > > NewFunctor(const Owner *owner, void (Owner::*function)(T0 ) const) {
  return smart_ptr<Closure<T0 > >(new Closure_Member_C<Owner , T0 > (owner, function));
};

// End of copied block
// Start of copied block

template<typename Returnvalue , typename T0 > class Callback<Returnvalue , T0 , void>  : private boost::noncopyable {
public:
  virtual Returnvalue Run(T0 param0 ) const = 0;

  virtual ~Callback() { };
};

template<typename Owner , typename Returnvalue , typename T0 > class Callback_Member_NC<Owner , Returnvalue , T0 , void>  : public Callback<Returnvalue , T0 >  {
private:
  Owner *owner;
  Returnvalue (Owner::*function)(T0 );

public:
  virtual Returnvalue Run(T0 param0 ) const { return (owner->*function)(param0 ); };
  
  Callback_Member_NC(Owner *owner, Returnvalue (Owner::*function)(T0 )) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue , typename T0 > class Callback_Member_C<Owner , Returnvalue , T0 , void>  : public Callback<Returnvalue , T0 >  {
private:
  const Owner *owner;
  Returnvalue (Owner::*function)(T0 ) const;

public:
  virtual Returnvalue Run(T0 param0 ) const { return (owner->*function)(param0 ); };
  
  Callback_Member_C(const Owner *owner, Returnvalue (Owner::*function)(T0 ) const) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue , typename T0 >  smart_ptr<Callback<Returnvalue , T0 > > NewFunctor(Owner *owner, Returnvalue (Owner::*function)(T0 )) {
  return smart_ptr<Callback<Returnvalue , T0 > >(new Callback_Member_NC<Owner , Returnvalue , T0 > (owner, function));
};

template<typename Owner , typename Returnvalue , typename T0 >  smart_ptr<Callback<Returnvalue , T0 > > NewFunctor(const Owner *owner, Returnvalue (Owner::*function)(T0 ) const) {
  return smart_ptr<Callback<Returnvalue , T0 > >(new Callback_Member_C<Owner , Returnvalue , T0 > (owner, function));
};

// End of copied block
// Start of copied block

template<> class Closure<void, void>  : private boost::noncopyable {
public:
  virtual void Run() const = 0;

  virtual ~Closure() { };
};

template<typename Owner > class Closure_Member_NC<Owner , void, void>  : public Closure<>  {
private:
  Owner *owner;
  void (Owner::*function)();

public:
  virtual void Run() const { return (owner->*function)(); };
  
  Closure_Member_NC(Owner *owner, void (Owner::*function)()) : owner(owner), function(function) { };
};

template<typename Owner > class Closure_Member_C<Owner , void, void>  : public Closure<>  {
private:
  const Owner *owner;
  void (Owner::*function)() const;

public:
  virtual void Run() const { return (owner->*function)(); };
  
  Closure_Member_C(const Owner *owner, void (Owner::*function)() const) : owner(owner), function(function) { };
};

template<typename Owner >  smart_ptr<Closure<> > NewFunctor(Owner *owner, void (Owner::*function)()) {
  return smart_ptr<Closure<> >(new Closure_Member_NC<Owner > (owner, function));
};

template<typename Owner >  smart_ptr<Closure<> > NewFunctor(const Owner *owner, void (Owner::*function)() const) {
  return smart_ptr<Closure<> >(new Closure_Member_C<Owner > (owner, function));
};

// End of copied block
// Start of copied block

template<typename Returnvalue > class Callback<Returnvalue , void, void>  : private boost::noncopyable {
public:
  virtual Returnvalue Run() const = 0;

  virtual ~Callback() { };
};

template<typename Owner , typename Returnvalue > class Callback_Member_NC<Owner , Returnvalue , void, void>  : public Callback<Returnvalue >  {
private:
  Owner *owner;
  Returnvalue (Owner::*function)();

public:
  virtual Returnvalue Run() const { return (owner->*function)(); };
  
  Callback_Member_NC(Owner *owner, Returnvalue (Owner::*function)()) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue > class Callback_Member_C<Owner , Returnvalue , void, void>  : public Callback<Returnvalue >  {
private:
  const Owner *owner;
  Returnvalue (Owner::*function)() const;

public:
  virtual Returnvalue Run() const { return (owner->*function)(); };
  
  Callback_Member_C(const Owner *owner, Returnvalue (Owner::*function)() const) : owner(owner), function(function) { };
};

template<typename Owner , typename Returnvalue >  smart_ptr<Callback<Returnvalue > > NewFunctor(Owner *owner, Returnvalue (Owner::*function)()) {
  return smart_ptr<Callback<Returnvalue > >(new Callback_Member_NC<Owner , Returnvalue > (owner, function));
};

template<typename Owner , typename Returnvalue >  smart_ptr<Callback<Returnvalue > > NewFunctor(const Owner *owner, Returnvalue (Owner::*function)() const) {
  return smart_ptr<Callback<Returnvalue > >(new Callback_Member_C<Owner , Returnvalue > (owner, function));
};

// End of copied block

#endif
